{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom googleapiclient.discovery import build\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-08T08:01:02.118743Z","iopub.execute_input":"2024-07-08T08:01:02.119135Z","iopub.status.idle":"2024-07-08T08:01:04.044403Z","shell.execute_reply.started":"2024-07-08T08:01:02.119103Z","shell.execute_reply":"2024-07-08T08:01:04.043117Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"API_KEY = 'AIzaSyBahvf61QxJzgcIWiMzTIgFFiAkqfuYCWE'\n\ndef get_trending_videos(api_key, max_results=200):\n    #building youtube service\n    youtube = build('youtube', 'v3', developer=api_key)\n    \n    #initializing the list to hold video details\n    videos=[]\n    \n    #fetch most popular videos\n    request=youtube.videos().list(\n    part='snipper,contentDetails,statistics',\n    chart='mostPopular',\n    regionCode='US',\n    maxResults=50)\n    \n    #paginate throught the results if max_results > 50\n    while request and len(videos) < max_results:\n        response = request.execute()\n        for item in response['items']:\n            video_details = {\n                'video_id':item['id'],\n                'title':item['snippet']['title'],\n                'description': item['snippet']['description'],\n                'published_at': item['snippet']['publishedAt'],\n                'channel_id': item['snippet']['channelId'],\n                'channel_title': item['snippet']['channelTitle'],\n                'category_id': item['snippet']['categoryId'],\n                'tags': item['snippet'].get('tags', []),\n                'duration': item['contentDetails']['duration'],\n                'definition': item['contentDetails']['definition'],\n                'caption': item['contentDetails'].get('caption', 'false'),\n                'view_count': item['statistics'].get('viewCount', 0),\n                'like_count': item['statistics'].get('likeCount', 0),\n                'dislike_count': item['statistics'].get('dislikeCount', 0),\n                'favorite_count': item['statistics'].get('favoriteCount', 0),\n                'comment_count': item['statistics'].get('commentCount', 0)\n            }\n            videos.append(video_details)\n\n        # get the next page token\n        request = youtube.videos().list_next(request, response)\n\n    return videos[:max_results]","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:07:46.878671Z","iopub.execute_input":"2024-07-08T08:07:46.879143Z","iopub.status.idle":"2024-07-08T08:07:46.890056Z","shell.execute_reply.started":"2024-07-08T08:07:46.879112Z","shell.execute_reply":"2024-07-08T08:07:46.888930Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"def save_to_csv(data, filename):\n    df = pd.DataFrame(data)\n    df.to_csv(filename, index=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T08:08:04.195896Z","iopub.execute_input":"2024-07-08T08:08:04.196393Z","iopub.status.idle":"2024-07-08T08:08:04.202789Z","shell.execute_reply.started":"2024-07-08T08:08:04.196354Z","shell.execute_reply":"2024-07-08T08:08:04.201405Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}